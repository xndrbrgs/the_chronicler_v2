type books {
  user_books: [user_books]
    @materializer(query: "getUser_booksUsingUser_books_book_id_fkey")
  title: String
  review_count: ID
  recommended: String
  rating_count: ID
  rating: Float
  pages: ID
  image_url: String
  id: ID!
  goodreads_url: String
  genre: String
  description: String
  author: String
}

type user_books {
  users: users @materializer(query: "getUsers")
  user_id: ID
  id: ID!
  books: books @materializer(query: "getBooks")
  book_id: ID
}

type users {
  user_books: [user_books] @materializer(query: "getUser_books")
  password: String
  name: String
  id: ID!
  email: String
}

"""
The following queries are just a set of examples of how to access your schema.
Feel free to modify them or aggregate more.
"""
type Query {
  " Queries for type 'books' "
  books(id: ID!): books
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "books"
      configuration: "postgresql_config"
    )
  booksList: [books]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "books"
      configuration: "postgresql_config"
    )
  booksPaginatedList(first: Int, after: Int): [books]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "author", "description", "genre", "goodreads_url", "id", "image_url", "pages", "rating", "rating_count", "recommended", "review_count", "title" FROM "books" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  getBooks(book_id: ID!): books
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "author", "description", "genre", "goodreads_url", "id", "image_url", "pages", "rating", "rating_count", "recommended", "review_count", "title" FROM "books" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'user_books' "
  getUser_books(id: ID!): [user_books]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "book_id", "id", "user_id" FROM "user_books" WHERE "user_id" = $1
      """
      configuration: "postgresql_config"
    )
  getUser_booksUsingUser_books_book_id_fkey(id: ID!): [user_books]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "book_id", "id", "user_id" FROM "user_books" WHERE "book_id" = $1
      """
      configuration: "postgresql_config"
    )
  user_books(id: ID!): user_books
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "user_books"
      configuration: "postgresql_config"
    )
  user_booksList: [user_books]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "user_books"
      configuration: "postgresql_config"
    )
  user_booksPaginatedList(first: Int, after: Int): [user_books]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "book_id", "id", "user_id" FROM "user_books" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'users' "
  getUsers(user_id: ID!): users
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "email", "id", "name", "password" FROM "users" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  users(id: ID!): users
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "users"
      configuration: "postgresql_config"
    )
  usersList: [users]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "users"
      configuration: "postgresql_config"
    )
  usersPaginatedList(first: Int, after: Int): [users]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "email", "id", "name", "password" FROM "users" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
}

"""
The following mutations are just a set of examples of how to access your schema.
Feel free to modify them or aggregate more.
"""
type Mutation {
  " Mutations for type 'books' "
  deleteBooks(id: ID!): books
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "books"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertBooks(
    genre: String
    description: String
    pages: ID
    review_count: ID
    rating: Float
    goodreads_url: String
    image_url: String
    author: String
    rating_count: ID
    title: String
    recommended: String
  ): books
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "books"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updateBooks(
    id: ID!
    author: String
    description: String
    genre: String
    goodreads_url: String
    image_url: String
    pages: ID
    rating: Float
    rating_count: ID
    recommended: String
    review_count: ID
    title: String
  ): books
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "books" SET
        "author" = COALESCE($2, "author"),
        "description" = COALESCE($3, "description"),
        "genre" = COALESCE($4, "genre"),
        "goodreads_url" = COALESCE($5, "goodreads_url"),
        "image_url" = COALESCE($6, "image_url"),
        "pages" = COALESCE($7, "pages"),
        "rating" = COALESCE($8, "rating"),
        "rating_count" = COALESCE($9, "rating_count"),
        "recommended" = COALESCE($10, "recommended"),
        "review_count" = COALESCE($11, "review_count"),
        "title" = COALESCE($12, "title")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
  " Mutations for type 'user_books' "
  deleteUser_books(id: ID!): user_books
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "user_books"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertUser_books(book_id: ID, user_id: ID): user_books
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "user_books"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updateUser_books(id: ID!, book_id: ID, user_id: ID): user_books
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "user_books" SET
        "book_id" = COALESCE($2, "book_id"),
        "user_id" = COALESCE($3, "user_id")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
  " Mutations for type 'users' "
  deleteUsers(id: ID!): users
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "users"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertUsers(password: String, email: String, name: String): users
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "users"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updateUsers(id: ID!, email: String, name: String, password: String): users
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "users" SET
        "email" = COALESCE($2, "email"),
        "name" = COALESCE($3, "name"),
        "password" = COALESCE($4, "password")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
}
